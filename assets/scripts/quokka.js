//"Официальное" название JavaScript «ECMAScript»
/*JavaScript язык созданный для анимирования и улучшения отображения 
страниц сайтов в браузере
Скрипты распространяются и выполняются, как простой текст в браузере
Им не нужна специальная подготовка или компиляция для запуска.
Это отличает JavaScript от другого языка – Java.

Джвижки для выполнения в браузере
V8 – в Chrome, Opera и Edge.
SpiderMonkey – в Firefox.
…Ещё есть «Chakra» для IE, «JavaScriptCore», 
«Nitro» и «SquirrelFish» для Safari и т.д.

Что может JavaScript в браузере?
добавляет, изменяет, реагирует, показывает, отправляет запросы и тд

Чего НЕ может JavaScript в браузере?
доступ к памяти ограничен в целях защиты
запрос камеры только при разрешенеии юзера
перетаскивание файлов только самим юзером
страницы не знают друг о друге

Языки «над» JavaScript
языки, которые транспилируются (конвертируются) в JavaScript,
 прежде чем запустятся в браузере.
 CoffeeScript/TypeScript/Flow/Dart/Bryton
 */


//IDE среда разработки пример (VS code) менее мощные Sublime Text/Notepad++ и тд


/** Тег «script втутренний »
Программы на JavaScript могут быть вставлены в любое место HTML-документа
 с помощью тега <script>.

Для примера:
<!DOCTYPE HTML>
<html>
<body>
  <p>Перед скриптом...</p>
  <script>
    alert( 'Привет, мир!' );
  </script>
  <p>...После скрипта.</p>
</body>
</html>
*/

//Внешние скрипты
<script src="/path/to/script.js"></script>
/** Если атрибут src установлен, содержимое тега script будет игнорироваться.
В одном теге <script> нельзя использовать одновременно атрибут src 
и код внутри.
<script src="file.js">
  alert(1); // содержимое игнорируется, так как есть атрибут src
</script>
*/

/*Строгий режим — "use strict"
нужен чтобы старый код работал. Пишется в самом начале кода*/
// заметка: "use strict" в этом примере не используется
num = 5; // если переменная "num" раньше не существовала, она создаётся
alert(num); // 5
//Это плохая практика, которая приводит к ошибке в строгом режиме:
"use strict";
num = 5; // ошибка: num is not defined переменная не определена let


//Переменные
let a;
var b;
const c='10.08.1991'; // константа которую нельзя изменит 
//константы можно писать заглавными только если они записаны до начала всего
const BIRTHDAY = '18.04.1982'; // использовать заглавные буквы можно
// а здесь нельзя загланые ибо выражение вычисляется во время работы скрипта
const age23 = someCode(BIRTHDAY); 

//имена переменных должны содержать только ABC и цифры и $ и _
//первый символ не может быть цифрой
let userName1 = 'Kolya'
let userName2 = '_'
let userName3 = '$'
//можно называть переменные на любом языке мира, но не надо
//NAME и name разные переменные

//переменные let и const видны только в рамках {}
if (true) {
    let aa = 1;
    var bb = 2;
    const cc = 3;
}
//console.log(aa); ошибка is not defined 
//console.log(cc); ошибка is not defined 
console.log(bb);

// Всплытие переменных
console.log(aaa);
var aaa = 1; //

//Динамически типизированный язык
// Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.
// Не будет ошибкой
let message = "hello";
message = 123456;

//«специальные числовые значения», которые относятся к этому типу данных: 
//Infinity, -Infinity и NaN.
//Мы можем получить его в результате деления на ноль:
alert( 1 / 0 ); // Infinity
alert( "не число" / 2 ); // NaN, такое деление является ошибкой
//Любая математическая операция с NaN возвращает NaN:
alert( NaN + 1 ); // NaN
alert( 3 * NaN ); // NaN
alert( "не число" / 2 - 1 ); // NaN
//исключение: NaN ** 0 равно 1


//Типы переменных 
//Число диапазон от -(2 в 53 степени -1) до (2 в 53 степени -1)
let numberVar = 123;

//Bigint диапазон больше типа Число
let bigintVar1 = 9007199254740991n; //добавление n в конце
let bigintVar2 = BigInt(9007199254740991);
let bigintVar3 = BigInt("9007199254740991");
let bigintVar4 = BigInt("0x1fffffffffffff");
// ↪ 9007199254740991n
let bigintVar5 = BigInt("0b11111111111111111111111111111111111111111111111111111");
// ↪ 9007199254740991n

//Строка string
let stringVar1 = "slovo";
let stringVar2 = 'Одинарные кавычки тоже подойдут';
//${str} встраивает выражение в строку
let nameString = "Иван";
// Вставим переменную
alert( `Привет, ${nameString}!` ); // Привет, Иван!
// Вставим выражение
alert( `результат: ${1 + 2}` ); // результат: 3

//Булевые значения
let booleanVar1 = true;
let booleanVar2 = false;

//Значение NULL (ничего/пусто/значение неизвестно)
let nullVar = null; 

//Значение «undefined» «значение не было присвоено».
let AGE //Если переменная объявлена, но ей не присвоено никакого значения
alert(AGE); // выведет "undefined"

//Объекты и символы
let objectVar1 = {};
let objectVar = object;
let symbolVar = symbol('stroka');

//Оператор typeof
typeof Symbol("id") // "symbol"
typeof 0 // "number"
typeof 10n // "bigint"
typeof true // "boolean"
typeof "foo" // "string"
typeof Math // "object" это встроенный объект, который предоставляет математические операции и константы.
typeof null // "object" Это официально признанная ошибка в typeof. null не обьект
typeof alert // Вызов typeof alert возвращает "function", потому что alert является функцией. 


//В JavaScript есть 8 основных типов данных.
/** Типы деляться на примитивные и не примитивные
 * Примитивные это:
 * number bigint string boolean null undefined symbol 
 * Все остальные не примитивные 
 * object  */

//Взаимодействие: alert, prompt, confirm

 alert("Hello"); // модальное окно, пока не нажата кнопка остальное не активно

//функция prompt отобразит окно с текстом, полем для ввода текста и кнопками OK/Отмена.
// result = prompt(title, [default]);
//title Текст для отображения в окне.
//default Необязательный второй параметр, который устанавливает начальное значение в поле для текста в окне.
let Age = prompt('Сколько тебе лет?', 100);
alert(`Тебе ${Age} лет!`); // Тебе 100 лет!
//если отмена то Null

/**Функция confirm отображает модальное окно с текстом вопроса question
 *  и двумя кнопками: OK и Отмена.
Результат – true, если нажата кнопка OK. В других случаях – false. */
result = confirm(question);
let isBoss = confirm("Ты здесь главный?");
alert( isBoss ); // true, если нажата OK

//Преобразование типов

//Строковое преобразование
let value = true; //значение true 
alert(typeof value); // определяет тип value как boolean
value = String(value); // переводит value к типу строка 
alert(typeof value); // string

//Численное преобразование
alert( "6" / "2" ); // 3, строки преобразуются в числа
let str = "123"; // str строка раз в ковычках ""
alert(typeof str); // определяет тип string
let num = Number(str); // становится числом 123
alert(typeof num); // number
let age1 = Number("Любая строка вместо числа"); // в число строку
alert(age1); // NaN, преобразование не удалось
alert( Number("   123   ") ); // 123
alert( Number("123z") ); // NaN (ошибка чтения числа на месте символа "z")
alert( Number(true) );        // 1
alert( Number(false) );       // 0
//null становится 0, undefined(непределено) приводится к NaN(неизвестно).

//Логическое преобразование
/*Правило преобразования:
Значения, которые интуитивно «пустые», вроде 0, пустой строки,
 null, undefined и NaN, становятся false.
Все остальные значения становятся true.*/
alert( Boolean(1) ); // true
alert( Boolean(0) ); // false
alert( Boolean("Привет!") ); // true
alert( Boolean("") ); // false
alert( Boolean("0") ); // true
alert( Boolean(" ") ); // пробел это тоже true (любая непустая строка это true)


//Математические операторы
//Унарный  называется оператор, который применяется к одному операнду. 
let x2 = 1;
x2 = -x2;
alert( x2 ); // -1, применили унарный минус
//Бинарным называется оператор, который применяется к двум операндам. 
let x = 1, y = 3;
alert( y - x ); // 2, бинарный минус вычитает значения

/*Математика
Поддерживаются следующие математические операторы:
+ - * /
Взятие остатка от деления %,
Возведение в степень **. */

//Взятие остатка %
alert( 5 % 2 ); // 1, остаток от деления 5 на 2 = 2*2+1
alert( 8 % 3 ); // 2, остаток от деления 8 на 3 = 3*2+3
//Возведение в степень **
alert( 2 ** 3 ); // 8  (2 умножено на себя 3 раза)
alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня)
//бинарный + сложение строк
let s = "моя" + "строка";
alert(s); // моястрока
alert( '1' + 2 ); // "12" // если хотябы один будет строка, то всё строка
alert( 2 + '1' ); // "21"
alert(2 + 2 + '1' ); // будет 2+2=4 затем 4 в строку "41", а не "221"
//вычитаение и деление работют наоборот
alert( 6 - '2' ); // 4, '2' приводится к числу
alert( '6' / '2' ); // 3, оба операнда приводятся к числам

//Приведение к числу, унарный + , то есть применённый к одному значению, 
//плюс + ничего не делает с числами. 
// Не влияет на числа
let x1 = 1;
alert( +x1 ); // 1
let y1= -2;
alert( +y1 ); // -2
//Но если операнд не число, унарный плюс преобразует его в число.
// Преобразует не числа в числа
alert( +true ); // 1
alert( +"" );   // 0
//сложение строк бинарным +
let apples = "2";
let oranges = "3";
alert( apples + oranges ); // "23"
//унарный + для преобразования в числа строк
let apples1 = "2";
let oranges1 = "3";
// оба операнда предварительно преобразованы в числа
alert( +apples1 + +oranges1 ); // 5

//Приоритет операторов
/*Приоритет	Название	            Обозначение
…	          …	                    …
15	        унарный плюс	        +
15	        унарный минус	        -
14	        возведение в степень	**
13	        умножение	            *
13	        деление	              /
12	        сложение	            +
12	        вычитание	            -
…	…	…
2	          присваивание	        =
…	…	…*/
//Присваивание = возвращает значение
//Вызов x = value записывает value в x и возвращает его.
let a1 = 1;
let b1 = 2;
let c1 = 3 - (a1 = b1 + 1); a1 = 2+1 //= 3
alert( a1 ); // 3
alert( c1 ); // 0
//Сокращённая арифметика с присваиванием
let n = 2;
n += 5; // теперь n = 7 (работает как n = n + 5)
n *= 2; // теперь n = 14 (работает как n = n * 2)
alert( n ); // 14
//Инкремент/декремент
//Инкремент ++ увеличивает переменную на 1:
let counter1 = 2;
counter1++; // работает как counter = counter + 1, просто запись короче
alert( counter1 ); // 3
//Декремент -- уменьшает переменную на 1:
let counter2 = 2;
counter2--; // работает как counter = counter - 1, просто запись короче
alert( counter2 ); // 1

//«Префиксная форма» — это когда оператор идёт перед переменной: ++counter.
//Если хочется тут же использовать результат, то нужна префиксная форма:
let counter = 1;
let a2 = ++counter; // (*) 1+1
alert(a2); // 2
//Когда оператор идёт после переменной — это «постфиксная форма»: counter++.
//Если нужно увеличить и при этом получить значение переменной до увеличения – нужна постфиксная форма:
let counter3 = 1;
let a3 = counter3++; // counter3++ вернёт то что было до, тоесть 1
alert(a); // 1

//Побитовые операторы
/*Поддерживаются следующие побитовые операторы:
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )*/

//Оператор «запятая»
/*Оператор «запятая» предоставляет нам возможность вычислять несколько
 выражений, разделяя их запятой ,. Каждое выражение выполняется, 
 но возвращается результат только последнего.*/
 let a4 = (1 + 2, 3 + 4);
 alert( a4 ); // 7 (результат вычисления 3 + 4)
 let a5 = 1, b5 = 1;
alert( ++a5 ); // 2, префиксная форма возвращает новое значение
alert( b5++ ); // 1,постфиксная форма возвращает старое значение и делает +1
alert( a5 ); // 2, значение увеличено один раз
alert( b5 ); // 2, значение увеличено один раз
/*Примеры
"" + 1 + 0 = "10" // (1)
"" - 1 + 0 = -1 // (2)
true + false = 1
6 / "3" = 2
"2" * "3" = 6
4 + 5 + "px" = "9px"
"$" + 4 + 5 = "$45"
"4" - 2 = 2
"4px" - 2 = NaN
"  -9  " + 5 = "  -9  5" // (3)
"  -9  " - 5 = -14 // (4)
null + 1 = 1 // (5)
undefined + 1 = NaN // (6)
" \t \n" - 2 = -2 // (7)*/

//Операторы сравнения
//оператов == не строгое равенство
//a>b a<b a==b(равно) a!=b(не равно)
//результат true или falses 
let result = 5 > 4; // результат сравнения присваивается переменной result
alert( result ); // true

//1)Сравнение строк строки сравниваются посимвольно.
alert( 'Я' > 'А' ); // true
alert( 'Коты' > 'Кода' ); // true т>д исходя из таблицы Unicode
alert( 'Сонный' > 'Сон' ); // true Используется кодировка Unicode, а не настоящий алфавит
//2)При сравнении значений разных типов JavaScript приводит каждое из них к числу.
alert( '2' > 1 ); // true, строка '2' становится числом 2
alert( '01' == 1 ); // true, строка '01' становится числом 1
//3)Логическое значение true становится 1, а false – 0.
alert( true == 1 ); // true
alert( false == 0 ); // true
alert( '' == false ); // true

//Строгое сравнение
//1)Оператор строгого равенства === проверяет равенство без приведения типов.
alert( 0 === false ); // false, так как сравниваются разные типы
//2)Сравнение с null и undefined
alert( null === undefined ); // false так как различны их типы.
alert( null == undefined ); // true так как приводятся к числу
/*3)Значения null и undefined равны == друг другу и не равны любому другому значению.
При использовании математических операторов и других операторов сравнения < > <= >=
Значения null/undefined преобразуются к числам: null становится 0, а undefined – NaN.*/
alert( null > 0 );  // (1) false
alert( null == 0 ); // (2) false
alert( null >= 0 ); // (3) true
/*4)Значение undefined несравнимо с другими значениями:*/
alert( undefined > 0 ); // false (1) преобразуется в NaN, а NaN – это специальное числовое значение
alert( undefined < 0 ); // false (2), которое возвращает false при любых сравнениях.
alert( undefined == 0 ); // false (3)

//Условное ветвление: if, '?'
/*1)Инструкция «if»
Инструкция if(...) вычисляет условие в скобках и, если результат true, то выполняет блок кода.*/
let year = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');
if (year == 2015) {
    alert( "Правильно!" );
    alert( "Вы такой умный!" );
  }
/*Преобразование к логическому типу
Инструкция if (…) вычисляет выражение в скобках и преобразует результат к логическому типу.*/
/*Число 0, пустая строка "", null, undefined и NaN становятся false. 
Из-за этого их называют «ложными» («falsy») значениями.
Остальные значения становятся true, поэтому их называют «правдивыми» («truthy»).*/

//1)Блок «else»
let year1 = prompt('В каком году была опубликована спецификация ECMAScript-2015?', '');
if (year1 == 2015) {
  alert( 'Да вы знаток!' );
} else {
  alert( 'А вот и неправильно!' ); // любое значение, кроме 2015
}

//1)Условный оператор „?“ "Тернарный"
let accessAllowed;
let age = prompt('Сколько вам лет?', '');
if (age > 18) {
  accessAllowed = true;
} else {
  accessAllowed = false;
}
alert(accessAllowed);
//Синтаксис:
let result1 = условие ? значение1 : значение2;
//Сначала вычисляется условие: если оно истинно, тогда возвращается значение1, 
//в противном случае – значение2.
let accessAllowed1 = (age > 18) ? true : false;

//2)Несколько операторов „?“
let age2 = prompt('Возраст?', 18);
let message2 = (age2 < 3) ? 'Здравствуй, малыш!' :
  (age2 < 18) ? 'Привет!' :
  (age2 < 100) ? 'Здравствуйте!' :
  'Какой необычный возраст!';
alert( message );

//3)Нетрадиционное использование „?“
//Иногда оператор «вопросительный знак» ? используется в качестве замены if:
let company = prompt('Какая компания создала JavaScript?', '');
(company == 'Netscape') ?
   alert('Верно!') : alert('Неправильно.'); // нельзя так писать, не удобно для чтения

//Логические операторы
//1)В JavaScript есть четыре логических оператора: 
// || (ИЛИ), && (И) и ! (НЕ), ?? (Оператор нулевого слияния). 
// || (ИЛИ)
alert( true || true );   // true
alert( false || true );  // true
alert( true || false );  // true
alert( false || false ); // false 
//Например, число 1 будет воспринято как true, а 0 – как false:
let hour = 9;
if (hour < 10 || hour > 18) {
  alert( 'Офис закрыт.' );
}
/*2)Оператор || выполняет следующие действия:
Вычисляет операнды слева направо.
Каждый операнд конвертирует в логическое значение. 
Если результат true, останавливается и возвращает исходное значение этого операнда.
Если все операнды являются ложными (false), возвращает последний из них.*/
alert( 1 || 0 ); // 1
alert( true || 'no matter what' ); // true
alert( null || 1 ); // 1 (первое истинное значение)
alert( null || 0 || 1 ); // 1 (первое истинное значение)
alert( undefined || null || 0 ); // 0 (поскольку все ложно, возвращается последнее значение)
//2.1)Получение первого истинного значения из списка переменных или выражений.
let currentUser = null;
let defaultUser = "John";
let name = currentUser || defaultUser || "unnamed";
alert( name ); // выбирается "John" – первое истинное значение
//2)Сокращённое вычисление.